pipeline {
  agent any

  options {
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
    durabilityHint('MAX_SURVIVABILITY')
    timestamps()
  }

  environment {
    IMAGE       = 'propozal-backend:latest'
    CONTAINER   = 'propozal-backend'
    BACKEND_DIR = 'propozal-backend'
    ENV_FILE    = '/srv/Propozal/propozal-backend/.env'
    HOST_PORT   = '8081'
  }

  tools {
    gradle 'gradle-8.10.2'
  }

  stages {
    stage('Checkout') {
      steps {
        // 이전 워크스페이스 깔끔히 비우고 시작 (재시작/중단 잔여물 제거)
        deleteDir()
        echo '📦 Checkout from SCM (job branch setting respected)'
        checkout scm
      }
    }

    stage('Build Jar') {
      options { timeout(time: 20, unit: 'MINUTES') }  // 스테이지 타임아웃
      steps {
        echo '🔧 Gradle build (skip tests, no daemon)'
        dir("${BACKEND_DIR}") {
          sh """#!/usr/bin/env bash
          set -euo pipefail
          GRADLE_BIN="${tool 'gradle-8.10.2'}/bin/gradle"
          "\${GRADLE_BIN}" --no-daemon --console=plain --max-workers=2 clean bootJar -x test
          """
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        echo "🐳 Docker build: ${IMAGE}"
        sh 'docker build -t $IMAGE $BACKEND_DIR'
      }
    }

    stage('Deploy Container') {
      steps {
        echo '🧹 Stop & remove previous container (if any)'
        sh '''
          docker stop $CONTAINER || true
          docker rm $CONTAINER || true
        '''
        echo '🚀 Run new container'
        sh '''
          docker run -d --name $CONTAINER \
            --restart unless-stopped \
            --env-file $ENV_FILE \
            -p 127.0.0.1:${HOST_PORT}:8080 \
            $IMAGE
        '''
      }
    }

    stage('Smoke Test') {
      options { timeout(time: 5, unit: 'MINUTES') }
      steps {
        echo '🩺 Smoke test'
        sh '''
          (curl -fsS http://127.0.0.1:${HOST_PORT}/actuator/health || \
           curl -fsS http://127.0.0.1:${HOST_PORT}/api/schedule/upcoming) >/dev/null
        '''
      }
    }
  }

  post {
    success {
      echo '✅ Backend Build & Deployment Success!'
    }
    failure {
      echo '❌ Build Failed'
    }
    always {
      // 도커 이미지 캐시 및 워크스페이스 정리
      sh 'docker image prune -f || true'
      cleanWs()
    }
  }
}
