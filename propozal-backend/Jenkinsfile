pipeline {
  agent any

  options {
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
    durabilityHint('MAX_SURVIVABILITY')
    timestamps()
  }

  environment {
    IMAGE       = 'propozal-backend:latest'
    CONTAINER   = 'propozal-backend'
    BACKEND_DIR = 'propozal-backend'
    ENV_FILE    = '/srv/Propozal/propozal-backend/.env'
    HOST_PORT   = '8081'
    GRADLE_USER_HOME = '/var/lib/jenkins/.gradle'
  }

  tools { gradle 'gradle-8.10.2' }

  stages {
    stage('Checkout') {
      steps {
        echo '📦 Checkout from SCM (job branch setting respected)'
        checkout scm
      }
    }

    stage('Build Jar') {
      options { timeout(time: 15, unit: 'MINUTES') }
      steps {
        echo '🔧 Gradle build (skip tests, cached, heartbeat)'
        dir("${BACKEND_DIR}") {
          sh '''#!/usr/bin/env bash
          set -euo pipefail
          gradle --no-daemon --console=plain --build-cache --max-workers=2 \
                -Dorg.gradle.logging.stacktrace=all \
                clean bootJar -x test
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        echo "🐳 Docker build: ${IMAGE}"
        withEnv(['DOCKER_BUILDKIT=0']) {
          sh '''
            set -e
            # 1) JAR 존재 확인하고 컨텍스트로 복사
            ls -l propozal-backend/build/libs || true
            cp -f propozal-backend/build/libs/*.jar propozal-backend/app.jar

            # 2) 이미지 빌드
            docker build -t $IMAGE $BACKEND_DIR

            # 3) 청소(선택)
            rm -f propozal-backend/app.jar || true
          '''
        }
      }
    }

    stage('Deploy Container') {
      steps {
        echo '🧹 Stop & remove previous container (if any)'
        sh '''
          docker stop $CONTAINER || true
          docker rm $CONTAINER || true
        '''
        echo '🚀 Run new container'
        sh '''
          docker run -d --name $CONTAINER \
            --restart unless-stopped \
            --env-file $ENV_FILE \
            --add-host=host.docker.internal:host-gateway \
            -p 127.0.0.1:${HOST_PORT}:8080 \
            $IMAGE
        '''
      }
    }
    stage('Smoke Test') {
      options { timeout(time: 4, unit: 'MINUTES') }
      steps {
        withEnv(["HOST_PORT=${HOST_PORT ?: '8081'}"]) {
          echo '🩺 Smoke test (wait for Spring Boot to be ready via logs)'
          sh '''
            set -e

            # 1) 컨테이너 로그에서 "Started ...Application" or "Tomcat started on port" 나올 때까지 대기
            echo "⏳ Waiting app startup messages in docker logs..."
            ready=0
            for i in $(seq 1 60); do
              if docker logs --tail 200 propozal-backend 2>&1 | grep -Eq "Started .*Application|Tomcat started on port"; then
                echo "✅ Spring Boot startup detected in logs"
                ready=1
                break
              fi
              sleep 3
            done
            if [ "$ready" -ne 1 ]; then
              echo "❌ App did not signal startup in logs"
              docker logs --tail 300 propozal-backend || true
              exit 1
            fi

            # 2) /actuator/health 재시도 (401/503도 초기엔 나올 수 있음)
            HEALTH_URL="http://127.0.0.1:${HOST_PORT}/actuator/health"
            echo "🔎 Probing health: $HEALTH_URL"
            ok=0
            for i in $(seq 1 30); do
              # curl 있으면 사용, 없으면 wget
              if command -v curl >/dev/null 2>&1; then
                code=$(curl -sS -m 5 -o /tmp/health_body -w "%{http_code}" "$HEALTH_URL" || echo 000)
                body="$(cat /tmp/health_body 2>/dev/null || true)"
              else
                code=$(wget -q --server-response -O /tmp/health_body "$HEALTH_URL" 2>&1 | awk '/^  HTTP/{print $2}' | tail -1)
                body="$(cat /tmp/health_body 2>/dev/null || true)"
              fi

              echo "  try ${i}: http ${code} $(echo "$body" | tr -d "\\n" | cut -c1-120)"

              # 보안 설정에 따라 200/UP 또는 401이 올 수 있음.
              # 200이면서 "UP"이면 합격. 401이면 보안으로 막힌 것뿐이라 '기동은 성공'으로 간주하고 통과시켜도 됨.
              if echo "$body" | grep -q '"status"[[:space:]]*:[[:space:]]*"UP"'; then
                ok=1; break
              fi
              if [ "$code" = "401" ]; then
                echo "ℹ️  health endpoint requires auth (HTTP 401) — app is up. Treating as PASS."
                ok=1; break
              fi
              sleep 3
            done

            if [ "$ok" -ne 1 ]; then
              echo "❌ Health check not UP"
              docker logs --tail 300 propozal-backend || true
              exit 1
            fi

            echo "✅ Smoke test passed"
          '''
        }
      }
    }
  }

  post {
    failure {
      echo '❌ Build Failed — generating Gradle profile report for diagnosis'
      dir("${BACKEND_DIR}") {
        sh '''#!/usr/bin/env bash
        set -euo pipefail
        gradle --no-daemon --console=plain help --scan || true
        '''
      }
    }
    success { echo '✅ Backend Build & Deployment Success!' }
    always  { sh 'docker image prune -f || true' }
  }
}
