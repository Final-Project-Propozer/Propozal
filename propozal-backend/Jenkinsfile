pipeline {
  agent any

  options {
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
    durabilityHint('MAX_SURVIVABILITY')
    timestamps()
  }

  environment {
    IMAGE       = 'propozal-backend:latest'
    CONTAINER   = 'propozal-backend'
    BACKEND_DIR = 'propozal-backend'
    ENV_FILE    = '/srv/Propozal/propozal-backend/.env'
    HOST_PORT   = '8081'
    GRADLE_USER_HOME = '/var/lib/jenkins/.gradle'
  }

  tools { gradle 'gradle-8.10.2' }

  stages {
    stage('Checkout') {
      steps {
        echo 'üì¶ Checkout from SCM (job branch setting respected)'
        checkout scm
      }
    }

    stage('Build Jar') {
      options { timeout(time: 15, unit: 'MINUTES') }
      steps {
        echo 'üîß Gradle build (skip tests, cached, heartbeat)'
        dir("${BACKEND_DIR}") {
          sh '''#!/usr/bin/env bash
set -euo pipefail

GRADLE_BIN="$(tool 'gradle-8.10.2')/bin/gradle"
export GRADLE_OPTS="${GRADLE_OPTS:-} -Xmx2g -Dfile.encoding=UTF-8 \
 -Dorg.gradle.caching=true -Dorg.gradle.configuration-cache=true \
 -Dorg.gradle.workers.max=2"

( while true; do echo "[$(date +%T)] ‚è≥ still building‚Ä¶"; sleep 30; done ) &
HB=$!; trap 'kill $HB 2>/dev/null || true' EXIT

"$GRADLE_BIN" --no-daemon --console=plain --build-cache --max-workers=2 \
  -Dorg.gradle.configuration-cache.problems=warn \
  bootJar -x test

kill $HB 2>/dev/null || true
'''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        echo "üê≥ Docker build: ${IMAGE}"
        sh 'docker build -t $IMAGE $BACKEND_DIR'
      }
    }

    stage('Deploy Container') {
      steps {
        echo 'üßπ Stop & remove previous container (if any)'
        sh '''
          docker stop $CONTAINER || true
          docker rm $CONTAINER || true
        '''
        echo 'üöÄ Run new container'
        sh '''
          docker run -d --name $CONTAINER \
            --restart unless-stopped \
            --env-file $ENV_FILE \
            -p 127.0.0.1:${HOST_PORT}:8080 \
            $IMAGE
        '''
      }
    }

    stage('Smoke Test') {
      options { timeout(time: 2, unit: 'MINUTES') }
      steps {
        echo 'ü©∫ Smoke test'
        sh '''
          (curl -fsS http://127.0.0.1:${HOST_PORT}/actuator/health || \
           curl -fsS http://127.0.0.1:${HOST_PORT}/api/schedule/upcoming) >/dev/null
        '''
      }
    }
  }

  post {
    failure {
      echo '‚ùå Build Failed ‚Äî generating Gradle profile report for diagnosis'
      dir("${BACKEND_DIR}") {
        sh '''#!/usr/bin/env bash
set -euo pipefail
GRADLE_BIN="$(tool 'gradle-8.10.2')/bin/gradle"
"$GRADLE_BIN" --no-daemon --console=plain --profile bootJar -x test || true
'''
      }
      archiveArtifacts artifacts: 'propozal-backend/build/reports/profile/*.html', onlyIfSuccessful: false
    }
    success { echo '‚úÖ Backend Build & Deployment Success!' }
    always  { sh 'docker image prune -f || true' }
  }
}
