pipeline {
  agent any

  options {
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
    durabilityHint('MAX_SURVIVABILITY')
    timestamps()
  }

  environment {
    IMAGE       = 'propozal-backend:latest'
    CONTAINER   = 'propozal-backend'
    BACKEND_DIR = 'propozal-backend'
    ENV_FILE    = '/srv/Propozal/propozal-backend/.env'
    HOST_PORT   = '8081'
    GRADLE_USER_HOME = '/var/lib/jenkins/.gradle'
  }

  tools { gradle 'gradle-8.10.2' }

  stages {
    stage('Checkout') {
      steps {
        echo 'üì¶ Checkout from SCM (job branch setting respected)'
        checkout scm
      }
    }

    stage('Build Jar') {
      options { timeout(time: 15, unit: 'MINUTES') }
      steps {
        echo 'üîß Gradle build (skip tests, cached, heartbeat)'
        dir("${BACKEND_DIR}") {
          sh '''#!/usr/bin/env bash
          set -euo pipefail
          gradle --no-daemon --console=plain --build-cache --max-workers=2 \
                -Dorg.gradle.logging.stacktrace=all \
                clean bootJar -x test
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        echo "üê≥ Docker build: ${IMAGE}"
        withEnv(['DOCKER_BUILDKIT=0']) {
          sh '''
            set -e
            # 1) JAR Ï°¥Ïû¨ ÌôïÏù∏ÌïòÍ≥† Ïª®ÌÖçÏä§Ìä∏Î°ú Î≥µÏÇ¨
            ls -l propozal-backend/build/libs || true
            cp -f propozal-backend/build/libs/*.jar propozal-backend/app.jar

            # 2) Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
            docker build -t $IMAGE $BACKEND_DIR

            # 3) Ï≤≠ÏÜå(ÏÑ†ÌÉù)
            rm -f propozal-backend/app.jar || true
          '''
        }
      }
    }

    stage('Deploy Container') {
      steps {
        echo 'üßπ Stop & remove previous container (if any)'
        sh '''
          docker stop $CONTAINER || true
          docker rm $CONTAINER || true
        '''
        echo 'üöÄ Run new container'
        sh '''
          docker run -d --name $CONTAINER \
            --restart unless-stopped \
            --env-file $ENV_FILE \
            --add-host=host.docker.internal:host-gateway \
            -p 127.0.0.1:${HOST_PORT}:8080 \
            $IMAGE
        '''
      }
    }

    stage('Smoke Test') {
      options { timeout(time: 2, unit: 'MINUTES') }
      steps {
        echo 'ü©∫ Smoke test (check liveness)'
        sh '''
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:${HOST_PORT}/actuator/health/liveness | grep -q '"status":"UP"'; then
              echo "Liveness is UP ‚úÖ"
              exit 0
            fi
            echo "Waiting for liveness... ($i/30)"
            sleep 5
          done
          echo "‚ùå Liveness check failed"
          exit 1
        '''
      }
    }
  }

  post {
    failure {
      echo '‚ùå Build Failed ‚Äî generating Gradle profile report for diagnosis'
      dir("${BACKEND_DIR}") {
        sh '''#!/usr/bin/env bash
        set -euo pipefail
        gradle --no-daemon --console=plain help --scan || true
        '''
      }
    }
    success { echo '‚úÖ Backend Build & Deployment Success!' }
    always  { sh 'docker image prune -f || true' }
  }
}
