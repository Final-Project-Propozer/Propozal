pipeline {
  agent any

  options {
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
    durabilityHint('MAX_SURVIVABILITY')
    timestamps()
  }

  environment {
    IMAGE       = 'propozal-backend:latest'
    CONTAINER   = 'propozal-backend'
    BACKEND_DIR = 'propozal-backend'
    ENV_FILE    = '/srv/Propozal/propozal-backend/.env'
    HOST_PORT   = '8081'
    GRADLE_USER_HOME = '/var/lib/jenkins/.gradle'
  }

  tools { gradle 'gradle-8.10.2' }

  stages {
    stage('Checkout') {
      steps {
        echo 'üì¶ Checkout from SCM (job branch setting respected)'
        checkout scm
      }
    }

    stage('Build Jar') {
      options { timeout(time: 15, unit: 'MINUTES') }
      steps {
        echo 'üîß Gradle build (skip tests, cached, heartbeat)'
        dir("${BACKEND_DIR}") {
          sh '''#!/usr/bin/env bash
          set -euo pipefail
          gradle --no-daemon --console=plain --build-cache --max-workers=2 \
                -Dorg.gradle.logging.stacktrace=all \
                clean bootJar -x test
          '''
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        echo "üê≥ Docker build: ${IMAGE}"
        withEnv(['DOCKER_BUILDKIT=0']) {
          sh '''
            set -e
            # 1) JAR Ï°¥Ïû¨ ÌôïÏù∏ÌïòÍ≥† Ïª®ÌÖçÏä§Ìä∏Î°ú Î≥µÏÇ¨
            ls -l propozal-backend/build/libs || true
            cp -f propozal-backend/build/libs/*.jar propozal-backend/app.jar

            # 2) Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
            docker build -t $IMAGE $BACKEND_DIR

            # 3) Ï≤≠ÏÜå(ÏÑ†ÌÉù)
            rm -f propozal-backend/app.jar || true
          '''
        }
      }
    }

    stage('Deploy Container') {
      steps {
        echo 'üßπ Stop & remove previous container (if any)'
        sh '''
          docker stop $CONTAINER || true
          docker rm $CONTAINER || true
        '''
        echo 'üöÄ Run new container'
        sh '''
          docker run -d --name $CONTAINER \
            --restart unless-stopped \
            --env-file $ENV_FILE \
            --add-host=host.docker.internal:host-gateway \
            -p 127.0.0.1:${HOST_PORT}:8080 \
            $IMAGE
        '''
      }
    }

    stage('Smoke Test') {
      options { timeout(time: 3, unit: 'MINUTES') }
      steps {
        withEnv(["HOST_PORT=${HOST_PORT ?: '8081'}"]) {
          echo 'ü©∫ Smoke test (wait for Spring Boot to be ready)'
          sh '''
            set +e
            HEALTH_URL="http://127.0.0.1:${HOST_PORT}/actuator/health"

            echo "‚è≥ Waiting for port ${HOST_PORT} to accept connections..."
            for i in $(seq 1 40); do
              (exec 3<>/dev/tcp/127.0.0.1/${HOST_PORT}) 2>/dev/null && { echo "‚úÖ Port open"; break; }
              echo "  ...port not open yet (${i}/40)"
              sleep 3
            done

            # HTTP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÑ†ÌÉù: curl Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ wget
            if command -v curl >/dev/null 2>&1; then
              http() { curl -sS -m 5 -o /tmp/health_body -w "%{http_code}" "$1"; }
            elif command -v wget >/dev/null 2>&1; then
              http() { wget -q --server-response -O /tmp/health_body "$1" 2>&1 | awk '/^  HTTP/{print $2}' | tail -1; }
            else
              echo "‚ùå curl/wget Îëò Îã§ ÏóÜÏùå"; exit 2
            fi

            echo "üîé Probing actuator health until UP..."
            success=0
            for i in $(seq 1 40); do
              code=$(http "$HEALTH_URL")
              body="$(cat /tmp/health_body || true)"
              echo "  try ${i}: http ${code} $(echo "$body" | tr -d "\\n" | cut -c1-120)"

              echo "$body" | grep -q '"status"[[:space:]]*:[[:space:]]*"UP"' && [ "$code" = "200" ] && { success=1; break; }
              sleep 3
            done

            if [ "$success" -ne 1 ]; then
              echo "‚ùå Smoke test failed. Dumping last logs..."
              docker logs --tail 200 propozal-backend || true
              exit 1
            fi

            echo "‚úÖ Smoke test passed: ${HEALTH_URL} is UP"
          '''
        }
      }
    }
  }

  post {
    failure {
      echo '‚ùå Build Failed ‚Äî generating Gradle profile report for diagnosis'
      dir("${BACKEND_DIR}") {
        sh '''#!/usr/bin/env bash
        set -euo pipefail
        gradle --no-daemon --console=plain help --scan || true
        '''
      }
    }
    success { echo '‚úÖ Backend Build & Deployment Success!' }
    always  { sh 'docker image prune -f || true' }
  }
}
